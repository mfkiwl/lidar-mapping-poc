{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Task List \u2693\ufe0e Get components Rover's parts Base's parts Other stuff for developement Develop Rover GNSS Emulator Ouput PPS Ouput GPRMC Ouput GNGGA Implement Lidar Mapping ROS application on Jetson Nano Dev Kit Install L4T OS Install ROS platform Install Livox SDK Install Livox ROS driver Create Lidar Mapping package Read GNSS input Configure UART ports Enable Time Sync in Livox ROS driver Read GNGGA messages and publish to the Mapping module Read GNSS correction from Base Configure SPI port Read GNSS correction from nRF24 Forward GNSS correction to GNSS module Read IMU input Modify DK-20789 to output processed Rotation Vector Read IMU and publish to the Mapping module Implement Mapping module Read Lidar point-cloud and extract timestamp Read GNSS poistion and extract timestamp Read IMU pose and extract timestamp Align data using timestamp Apply position on point-cloud Apply pose on points Publish mapped point-cloud Ouput systems status Configure I2C port Ouput system status to OLED Enable Auto-mount USB Configure Rover to log Observation Save Lidar point-cloud to USB Save GNSS observation to USB Save IMU pose to USB Develop Base Station Implement Base application on Raspberry Pi 3 B+ Install Raspbian OS Read GNSS correction input Configure UART port Read RTCM3 messages Output GNSS correction Configure SPI port Output RTCM3 messages to nRF24 Enable Auto-mount USB Save GNSS correction to USB Ouput systems status Configure I2C port Ouput system status to OLED Develop Post-Processing method Convert GNSS Observation data to RINEX format Build RTKLib module to process data Re-apply Mapping on processed Positions","title":"Home"},{"location":"#task-list","text":"Get components Rover's parts Base's parts Other stuff for developement Develop Rover GNSS Emulator Ouput PPS Ouput GPRMC Ouput GNGGA Implement Lidar Mapping ROS application on Jetson Nano Dev Kit Install L4T OS Install ROS platform Install Livox SDK Install Livox ROS driver Create Lidar Mapping package Read GNSS input Configure UART ports Enable Time Sync in Livox ROS driver Read GNGGA messages and publish to the Mapping module Read GNSS correction from Base Configure SPI port Read GNSS correction from nRF24 Forward GNSS correction to GNSS module Read IMU input Modify DK-20789 to output processed Rotation Vector Read IMU and publish to the Mapping module Implement Mapping module Read Lidar point-cloud and extract timestamp Read GNSS poistion and extract timestamp Read IMU pose and extract timestamp Align data using timestamp Apply position on point-cloud Apply pose on points Publish mapped point-cloud Ouput systems status Configure I2C port Ouput system status to OLED Enable Auto-mount USB Configure Rover to log Observation Save Lidar point-cloud to USB Save GNSS observation to USB Save IMU pose to USB Develop Base Station Implement Base application on Raspberry Pi 3 B+ Install Raspbian OS Read GNSS correction input Configure UART port Read RTCM3 messages Output GNSS correction Configure SPI port Output RTCM3 messages to nRF24 Enable Auto-mount USB Save GNSS correction to USB Ouput systems status Configure I2C port Ouput system status to OLED Develop Post-Processing method Convert GNSS Observation data to RINEX format Build RTKLib module to process data Re-apply Mapping on processed Positions","title":"Task List"},{"location":"components/","text":".md-typeset .admonition.specs, .md-typeset details.specs { margin: -2rem 0 0 -1.2rem; } .md-typeset .admonition.specs > .admonition-title::before, .md-typeset details.specs > summary::before{ visibility: hidden; } The system has 2 main parts: Rover is mounted on an RC Car or Drone to scan an area and map the captured point-cloud. Base acts as a stationary point which provide positioning correction to Rover for better accuracy. function toggleDetails(o) { var d = document.getElementsByTagName(\"details\"); Array.from(d).forEach( function(obj, idx) { obj.open = o; }); } Expand all Rover \u2693\ufe0e Livox Lidar Mid-40 100,000 points per second POV: 38.4\u00b0 circular Upto 260m @ 80% reflectivity Livox Converter 1.0 : Power, Ethernet, Sync RS485. > It's better to get Converter 2.0 Jetson Nano Developer Kit CPU Quad-core ARM A57 @ 1.43 GHz GPU 128-core Maxwell RAM 4 GB 64-bit LPDDR4 25.6 GB/s Gigabit Ethernet, M.2 Key E 4x USB 3.0, USB 2.0 Micro-B GPIO, I2C, I2S, SPI, UARTs MicroSD Card Should have at least 32 GB at high speed (V30) for saving point louds Sandisk Ultra 16 GB, class 10, SDHC I Unicorecomm GNSS UB482 GPS L1/L2 + BDS B1/B2 + GLONASS L1/ L2 + Galileo E1/E5b + QZSS L1/L2 Two antennas, support heading 20 Hz data output rate Ethernet, serial port, SPI, 1PPS Harxon HX-CH7604A antennas All-constellation Multi-frequency L1/L2, G1/G2, E1, B1/B2/B3 SMA Female to MMCX Male UB482 has MMCX (Mini-MCX) Female connector HX-CH7604A has SMA Male connector InvenSense DK-20789 7-axis motion sensor Embedded Microchip G55 MCU and debugger Embedded Motion Drivers Rechargeable Battery 16V with 2000 mAh Peak current at 4 A DC-DC Converter Except Lidar, all other boards use 5V Peak current at 4 A WiFi router No need this component if using a USB WiFi dongle connected to the Jetson board 4-port LAN 2 x Ethernet Cable Either connect Lidar to the Router or connect to the Jetson board directly after setting up static IPs on both sides nRF24L01 2.4GHz Transceiver + PA + LNA ISM 2.4GHz, 126 Channels GFSK 250kbps, 1Mbps v\u00e0 2Mbps SPI interface to host MCU PA + LNA for upto 1 Km range USB TTL to RS485 No need this component if using Livox Converter 2.0 5V operation, differential voltage >= 200 mV 3x USB TTL to COM No need this component if using on-board UARTs port after reconfiguring OS kernel 3.3V/ 5V to USB COM OLED LCD Show system status without connecting to PC via WiFi 128x64 Monochrome I2C interface Base \u2693\ufe0e Raspberry Pi 3 B+ This can be repalaced by a MCU as Base only needs to log data and transmit RTCM3 messages Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz 1GB LPDDR2 SDRAM 2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN, Bluetooth 4.2, BLE Gigabit Ethernet over USB 2.0 4 USB 2.0 ports GPIO, I2C, I2S, SPI, UARTs Unicorecomm GNSS UB4B0M Should cover the same constellation system of the Rover GPS L1/L2/L5 + BDS B1/B2/B3 + GLONASS L1/L2 + Galileo E1/E5a/E5b+ QZSS L1/L2/L5 UARTs, 1PPS Onboard MEMS integrated navigation ?? Harxon HX-CH7604A antennas All-constellation Multi-frequency L1/L2, G1/G2, E1, B1/B2/B3 SMA Female to MCX Male UB4B0M has MCX Female connector HX-CH7604A has SMA Male connector MicroSD Card Sandisk Ultra 16 GB, class 10, SDHC I Rechargeable Battery 5V with 2000 mAh Peak current at 2 A nRF24L01 2.4GHz Transceiver + PA + LNA ISM 2.4GHz, 126 Channels GFSK 250kbps, 1Mbps v\u00e0 2Mbps SPI interface to host MCU PA + LNA for upto 1 Km range USB TTL to COM No need this component if using on-board UARTs port after reconfiguring OS kernel 3.3V/ 5V to USB COM OLED LCD Show system status without connecting to PC via WiFi 128x64 Monochrome I2C interface Other stuff \u2693\ufe0e STM32 Dev board Emulate GNSS data when GPS is not available (in house, or cloudy days) Jump 2.0mm Unicorecomm GNSS modules use headers at 2.0mm pitch Remote Control Car with large base Mount Rover on the car for testing","title":"Components"},{"location":"components/#rover","text":"Livox Lidar Mid-40 100,000 points per second POV: 38.4\u00b0 circular Upto 260m @ 80% reflectivity Livox Converter 1.0 : Power, Ethernet, Sync RS485. > It's better to get Converter 2.0 Jetson Nano Developer Kit CPU Quad-core ARM A57 @ 1.43 GHz GPU 128-core Maxwell RAM 4 GB 64-bit LPDDR4 25.6 GB/s Gigabit Ethernet, M.2 Key E 4x USB 3.0, USB 2.0 Micro-B GPIO, I2C, I2S, SPI, UARTs MicroSD Card Should have at least 32 GB at high speed (V30) for saving point louds Sandisk Ultra 16 GB, class 10, SDHC I Unicorecomm GNSS UB482 GPS L1/L2 + BDS B1/B2 + GLONASS L1/ L2 + Galileo E1/E5b + QZSS L1/L2 Two antennas, support heading 20 Hz data output rate Ethernet, serial port, SPI, 1PPS Harxon HX-CH7604A antennas All-constellation Multi-frequency L1/L2, G1/G2, E1, B1/B2/B3 SMA Female to MMCX Male UB482 has MMCX (Mini-MCX) Female connector HX-CH7604A has SMA Male connector InvenSense DK-20789 7-axis motion sensor Embedded Microchip G55 MCU and debugger Embedded Motion Drivers Rechargeable Battery 16V with 2000 mAh Peak current at 4 A DC-DC Converter Except Lidar, all other boards use 5V Peak current at 4 A WiFi router No need this component if using a USB WiFi dongle connected to the Jetson board 4-port LAN 2 x Ethernet Cable Either connect Lidar to the Router or connect to the Jetson board directly after setting up static IPs on both sides nRF24L01 2.4GHz Transceiver + PA + LNA ISM 2.4GHz, 126 Channels GFSK 250kbps, 1Mbps v\u00e0 2Mbps SPI interface to host MCU PA + LNA for upto 1 Km range USB TTL to RS485 No need this component if using Livox Converter 2.0 5V operation, differential voltage >= 200 mV 3x USB TTL to COM No need this component if using on-board UARTs port after reconfiguring OS kernel 3.3V/ 5V to USB COM OLED LCD Show system status without connecting to PC via WiFi 128x64 Monochrome I2C interface","title":"Rover"},{"location":"components/#base","text":"Raspberry Pi 3 B+ This can be repalaced by a MCU as Base only needs to log data and transmit RTCM3 messages Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC @ 1.4GHz 1GB LPDDR2 SDRAM 2.4GHz and 5GHz IEEE 802.11.b/g/n/ac wireless LAN, Bluetooth 4.2, BLE Gigabit Ethernet over USB 2.0 4 USB 2.0 ports GPIO, I2C, I2S, SPI, UARTs Unicorecomm GNSS UB4B0M Should cover the same constellation system of the Rover GPS L1/L2/L5 + BDS B1/B2/B3 + GLONASS L1/L2 + Galileo E1/E5a/E5b+ QZSS L1/L2/L5 UARTs, 1PPS Onboard MEMS integrated navigation ?? Harxon HX-CH7604A antennas All-constellation Multi-frequency L1/L2, G1/G2, E1, B1/B2/B3 SMA Female to MCX Male UB4B0M has MCX Female connector HX-CH7604A has SMA Male connector MicroSD Card Sandisk Ultra 16 GB, class 10, SDHC I Rechargeable Battery 5V with 2000 mAh Peak current at 2 A nRF24L01 2.4GHz Transceiver + PA + LNA ISM 2.4GHz, 126 Channels GFSK 250kbps, 1Mbps v\u00e0 2Mbps SPI interface to host MCU PA + LNA for upto 1 Km range USB TTL to COM No need this component if using on-board UARTs port after reconfiguring OS kernel 3.3V/ 5V to USB COM OLED LCD Show system status without connecting to PC via WiFi 128x64 Monochrome I2C interface","title":"Base"},{"location":"components/#other-stuff","text":"STM32 Dev board Emulate GNSS data when GPS is not available (in house, or cloudy days) Jump 2.0mm Unicorecomm GNSS modules use headers at 2.0mm pitch Remote Control Car with large base Mount Rover on the car for testing","title":"Other stuff"}]}